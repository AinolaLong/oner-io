{"version":3,"file":null,"sources":["expect-action.js","../config/host.js","natty-fetch.spec.js","util.spec.js","ajax.spec.js","event.spec.js","storage.spec.js","plugin.spec.js","plugin.soon.spec.js","plugin.loop.spec.js","plugin.customRequest.spec.js","simple.spec.js","private-promise.spec.js"],"sourcesContent":["\nfunction ExpectAction() {\n    this.reset();\n}\n\nExpectAction.prototype.do = function (action) {\n    this.actualEvents.push(action);\n}\n\nExpectAction.prototype.count = function () {\n    this.count++;\n}\n\nExpectAction.prototype.expect = function (events) {\n    this.expectEvents = events;\n}\n\nExpectAction.prototype.reset = function () {\n    var t = this;\n    t.expectEvents = [];\n    t.actualEvents = [];\n    t.count = 0;\n}\n\nExpectAction.prototype.check = function () {\n    expect(this.actualEvents).to.eql(this.expectEvents);\n}\n\nexport default ExpectAction;","const host = 'http://localhost:8010/'\nexport {host}\n\n","\nimport {host} from '../config/host'\n\ndescribe('nattyFetch v__VERSION__ Unit Test', function() {\n\n    describe('static',function() {\n        it('version v__VERSION__', function() {\n            expect(nattyFetch.version).to.equal('__VERSION__');\n        });\n    });\n\n    describe('global setting',function() {\n        this.timeout(1000*10);\n        let defaultGlobalConfig = nattyFetch.getGlobal();\n        let defaultGlobalConfigProperties = [\n            'data',\n            'fit',\n            'header',\n            'ignoreSelfConcurrent',\n            'jsonp',\n            'log',\n            'method',\n            'mock',\n            'mockUrl',\n            'mockUrlPrefix',\n            'process',\n            'retry',\n            'timeout',\n            'url',\n            'urlPrefix',\n            'withCredentials',\n            'traditional'\n        ];\n\n        let emptyEvent = nattyFetch._event;\n\n        let resetNattyDBGlobalConfig = function () {\n            nattyFetch.setGlobal(defaultGlobalConfig);\n        };\n\n        beforeEach(function () {\n            resetNattyDBGlobalConfig();\n        });\n\n        afterEach(function () {\n            // 清理所有事件\n            let i;\n            for (i in nattyFetch._event) {\n                if (i.indexOf('__') === 0) {\n                    delete nattyFetch._event[i];\n                }\n            }\n        });\n\n        it('check default global config properties: `nattyFetch.getGlobal()`',function() {\n            defaultGlobalConfigProperties.forEach(function (property) {\n                expect(defaultGlobalConfig).to.have.key(property);\n            });\n        });\n\n        it('check `nattyFetch.getGlobal(\"property\")`', function () {\n            expect(nattyFetch.getGlobal('jsonp')).to.be(false);\n        });\n\n        it('check `nattyFetch.setGlobal(obj)`', function () {\n            nattyFetch.setGlobal({\n                data: {\n                    '_csrf_token': 1\n                }\n            });\n            expect(nattyFetch.getGlobal('data')).to.eql({\n                '_csrf_token': 1\n            });\n            // 还原\n            nattyFetch.setGlobal({data: {}});\n        });\n\n        it('Context instance would inherit and extend the global config', function () {\n\n            let urlPrefix = 'http://test.com/api';\n            let context = nattyFetch.context({\n                urlPrefix\n            });\n\n            // 继承了所有的全局配置\n            // defaultGlobalConfigProperties.forEach(function (property) {\n            //     expect(DBC.config).to.have.key(property);\n            // });\n            // 也扩展了全局配置\n            expect(context._config.urlPrefix).to.be(urlPrefix);\n        });\n\n        it('Context instance would inherit and extend the global config 2', function () {\n            let urlPrefix = 'http://test.com/api';\n            nattyFetch.setGlobal({\n                urlPrefix: urlPrefix\n            });\n\n            let context = nattyFetch.context();\n\n            context.create('order', {\n                create: {}\n            });\n\n            expect(context.api.order.create.config.urlPrefix).to.be(urlPrefix);\n        });\n\n        it('catch error', function (done) {\n            nattyFetch.setGlobal({\n                urlPrefix: host\n            });\n\n            let context = new nattyFetch.context();\n            context.create('order', {\n                create: {\n                    url: 'api/order-create',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {\n                // 调用一个不存在的函数, 触发一个js错误\n                notExistedFn();\n            })['catch'](function (error) {\n                if (window.console) {\n                    console.log(error.message);\n                    console.error(error.stack);\n                } else {\n                    C.log(error.message, error.stack);\n                }\n                done();\n            });\n        });\n\n        it('check global `resolve`', function (done) {\n            nattyFetch.setGlobal({\n                urlPrefix: host\n            });\n\n            nattyFetch.on('resolve', function (data, config) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n\n\n            let context = nattyFetch.context();\n            context.create('order', {\n                create: {\n                    url: 'api/order-create',\n                    method: 'POST'\n                }\n            });\n\n            context.api.order.create().then(function(data) {}, function () {});\n        });\n\n        it('check global `reject`', function (done) {\n            nattyFetch.setGlobal({\n                urlPrefix: host\n            });\n\n            nattyFetch.on('reject', function (error, config) {\n                try {\n                    expect(error.code).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n            let context = nattyFetch.context();\n            context.create('order', {\n                create: {\n                    url: 'api/return-error',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {}, function () {});\n        });\n\n        it('check context `resolve`', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host\n            });\n\n            context.on('resolve', function (data, config) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n            context.create('order', {\n                create: {\n                    url: 'api/order-create',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {\n            }, function () {\n\n            });\n        });\n\n        it('check context `reject`', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host\n            });\n\n            context.on('reject', function (error, config) {\n                try {\n                    expect(error.code).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n            context.create('order', {\n                create: {\n                    url: 'api/return-error',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {}, function () {});\n        });\n\n        it('check both global and context `resolve`', function (done) {\n            let globalResolve = false;\n            nattyFetch.setGlobal({\n                urlPrefix: host\n            });\n\n            nattyFetch.on('resolve', function (content) {\n                //console.log(1, content);\n                globalResolve = true;\n            });\n\n            let context = nattyFetch.context({});\n\n            context.on('resolve', function (content) {\n                //console.log(2, content);\n                try {\n                    expect(globalResolve).to.be(true);\n                    expect(content.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n            context.create('order', {\n                create: {\n                    url: 'api/order-create',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {}, function () {});\n        });\n\n        it('check both global and context `reject`', function (done) {\n            let globalReject = false;\n            nattyFetch.setGlobal({\n                urlPrefix: host\n            });\n\n            nattyFetch.on('reject', function (error) {\n                //console.log(1, error);\n                globalReject = true;\n            });\n\n\n            let context = nattyFetch.context({\n                urlPrefix: host\n            });\n\n            context.on('reject', function (error, config) {\n                //console.log(2, error);\n                try {\n                    expect(globalReject).to.be(true);\n                    expect(error.code).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n\n            context.create('order', {\n                create: {\n                    url: 'api/return-error',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function(data) {}, function () {});\n        });\n\n    });\n\n    describe('api config', function () {\n        this.timeout(1000*10);\n        let context;\n\n        beforeEach('reset NattyDB context', function () {\n            context = nattyFetch.context({\n                urlPrefix: host,\n                jsonp: true,\n                mock: false\n            });\n        });\n\n        it('both object and function can be used as api\\'s config', function () {\n            context.create('order', {\n                // api 对应 配置\n                pay: {},\n                // api 对应 返回配置的函数\n                create: function () {\n                    return {}\n                }\n            });\n\n            expect(context.api.order).to.be.a('object');\n            expect(context.api.order.pay).to.be.a('function');\n            expect(context.api.order.create).to.be.a('function');\n        });\n\n        it('`mock` option', function () {\n            context.create('order', {\n                pay: {\n                    mock: true\n                },\n                create: {\n                    mock: false\n                },\n                close: {\n                    // 此处mock的值等于context.mock\n                }\n            });\n\n            expect(context.api.order.pay.config.mock).to.be(true);\n            expect(context.api.order.create.config.mock).to.be(false);\n            expect(context.api.order.close.config.mock).to.be(false);\n        });\n\n        it('`mock` value from global', function () {\n            let context = nattyFetch.context();\n            context.create('order', {\n                pay: {\n                    // 这个mock等于全局mock值\n                }\n            });\n\n            expect(context.api.order.pay.config.mock).to.be(false);\n        });\n\n\n        it('`mockUrlPrefix` value from context', function () {\n            let context  = nattyFetch.context({\n                // NOTE 当`mock`为true时, 才会处理`mockUrl`的值\n                mock: true,\n                mockUrlPrefix: './mock/'\n            });\n            context.create('order', {\n                pay: {\n                    mockUrl: 'pay'\n                },\n                create: {\n                    mockUrl: '../create'\n                },\n                close: {\n                    mockUrl: 'https://www.demo.com/close'\n                }\n            });\n\n            expect(context.api.order.pay.config.mockUrl).to.be('./mock/pay');\n            expect(context.api.order.create.config.mockUrl).to.be('../create');\n            expect(context.api.order.close.config.mockUrl).to.be('https://www.demo.com/close');\n        });\n\n        it('`jsonp` option', () => {\n            context.create('order', {\n                pay: {\n                    url: 'path'\n                },\n                transfer: {\n                    jsonp: false,\n                    url: 'path'\n                },\n                create: {\n                    url: 'path.jsonp'\n                },\n                close: {\n                    url: 'path.jsonp?foo'\n                },\n                delay: {\n                    mock: true,\n                    mockUrl: 'foo',\n                    jsonp: false, // mock为true时, jsonp的值不会根据url的值自动纠正\n                    url: 'path.jsonp?foo'\n                }\n            });\n\n            expect(context.api.order.pay.config.jsonp).to.be(true);\n            expect(context.api.order.transfer.config.jsonp).to.be(false);\n            expect(context.api.order.create.config.jsonp).to.be(true);\n            expect(context.api.order.close.config.jsonp).to.be(true);\n            expect(context.api.order.delay.config.jsonp).to.be(false);\n        });\n\n        it('auto `urlPrefix`', function () {\n            context.create('order', {\n                method1: {\n                    url: 'path'\n                },\n                method2: {\n                    url: '//foo.com/path'\n                },\n                method3: {\n                    url: 'http://foo.com/path'\n                },\n                method4: {\n                    url: 'https://foo.com/path'\n                },\n                method5: {\n                    url: './path'\n                },\n                method6: {\n                    url: '../path'\n                },\n                method7: {\n                    url: '/path'\n                }\n            });\n\n            expect(context.api.order.method1.config.url).to.equal(host + 'path');\n            expect(context.api.order.method2.config.url).to.be('//foo.com/path');\n            expect(context.api.order.method3.config.url).to.be('http://foo.com/path');\n            expect(context.api.order.method4.config.url).to.be('https://foo.com/path');\n            expect(context.api.order.method5.config.url).to.be('./path');\n            expect(context.api.order.method6.config.url).to.be('../path');\n            expect(context.api.order.method7.config.url).to.be('/path');\n        });\n    });\n\n    describe.skip('request config', function () {\n        this.timeout(1000*10);\n        let context;\n\n        beforeEach('reset', function () {\n            context = nattyFetch.context();\n        });\n        // 当使用request参数时, 只有data, retry, ignoreSelfConcurrent起作用\n        it('`request` config with success', function (done) {\n            let getPayId = (successFn) => {\n                setTimeout(function () {\n                    successFn({id: 1});\n                }, 200);\n            };\n            context.create('order', {\n                getSign: {\n                    data: {\n                        a: 1\n                    },\n                    request: function (vars, config, defer) {\n                        // 验证参数是否正确合并\n                        expect(vars.data.a).to.be(1);\n                        expect(vars.data.b).to.be(1);\n                        getPayId(function (content) {\n                            defer.resolve(content);\n                        });\n                    }\n                }\n            });\n\n            context.api.order.getSign({\n                b: 1\n            }).then(function (content) {\n                expect(content.id).to.be(1);\n                done();\n            });\n        });\n\n        it('`request` config with error', function (done) {\n            let getPayId = (successFn, errorFn) => {\n                setTimeout(function () {\n                    errorFn({message: 1});\n                }, 200);\n            };\n            context.create('order', {\n                getSign: {\n                    request: function (data, config, defer, retryTime) {\n                        getPayId(function (content) {\n                            defer.resolve(content);\n                        }, function (error) {\n                            defer.reject(error);\n                        });\n                    }\n                }\n            });\n\n            context.api.order.getSign().then(function (content) {\n            }, function (error) {\n                expect(error.message).to.be(1);\n                done();\n            });\n        });\n\n        it('`request` config with retry', function (done) {\n            let getPayId = (successFn, errorFn) => {\n                setTimeout(function () {\n                    errorFn({message: 1});\n                }, 200);\n            };\n            context.create('order', {\n                getSign: {\n                    retry: 1,\n                    request: function (data, config, defer, retryTime) {\n                        //console.log(retryTime);\n\n                        getPayId(function (content) {\n                            defer.resolve(content);\n                        }, function (error) {\n                            defer.reject(error);\n                        });\n                    }\n                }\n            });\n\n            context.api.order.getSign().then(function (content) {\n            }, function (error) {\n                expect(error.message).to.be(1);\n                done();\n            });\n        });\n\n        it('`request` config with ignoreSelfConcurrent', function (done) {\n            let count = 0;\n            let getPayId = (successFn, errorFn) => {\n                count++;\n                setTimeout(function () {\n                    errorFn({message:1});\n                }, 200);\n            };\n\n            context.create('order', {\n                getSign: {\n                    ignoreSelfConcurrent: true,\n                    request: function (data, config, defer, retryTime) {\n                        //console.log(retryTime);\n\n                        getPayId(function (content) {\n                            defer.resolve(content);\n                        }, function (error) {\n                            defer.reject(error);\n                        });\n                    }\n                }\n            });\n\n            context.api.order.getSign().then(function (content) {\n            }, function (error) {\n                expect(error.message).to.be(1);\n            });\n\n            context.api.order.getSign().then(function (content) {\n            }, function (error) {\n            });\n\n            setTimeout(function () {\n                expect(count).to.be(1);\n                done();\n            }, 1000);\n        });\n    });\n\n    describe('ajax', function() {\n        // NOTE 重要: 为了能够测试完整的场景, 默认已经全局关闭所有请求的浏览器缓存!!!  比如: ignoreSelfConcurrent\n        //nattyFetch.setGlobal({\n        //    cache: false,\n        //    traditional: true\n        //});\n\n        this.timeout(1000*10);\n        let context;\n\n        beforeEach('reset', function () {\n            context = nattyFetch.context({\n                urlPrefix: host,\n                mock: false\n            });\n        });\n\n        it('play with standard data structure', function (done) {\n\n            context.create('order', {\n                create: {\n                    url: 'api/order-create',\n                    method: 'POST',\n                    //traditional: true\n                }\n            });\n\n            context.api.order.create().then(function(data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('play with non-standard data structure by `fit`', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create-non-standard',\n                    method: 'POST',\n                    fit: function (response) {\n                        return {\n                            success: !response.hasError,\n                            content: response.content\n                        };\n                    }\n                }\n            });\n            context.api.order.create().then(function(data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('process data', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create',\n                    method: 'POST',\n                    process: function (response) {\n                        return {\n                            orderId: response.id\n                        };\n                    }\n                }\n            });\n            context.api.order.create().then(function(data) {\n                try {\n                    expect(data.orderId).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        // 固定参数和动态参数 在process和fix方法中都可以正确获取到\n        it('`vars.data` in process or fix method', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create',\n                    method: 'POST',\n                    data: {\n                        fixData: 1\n                    },\n                    willFetch: function (vars, config) {\n                        vars.data.hookData = 1;\n                        // console.log(vars);\n                        // console.log(config);\n                        // console.log(this);\n                    },\n                    process: function (content, vars) {\n                        expect(vars.data.fixData).to.be(1);\n                        expect(vars.data.liveData).to.be(1);\n                        expect(vars.data.hookData).to.be(1);\n                        return {\n                            orderId: content.id\n                        };\n                    },\n                    fit: function (response, vars) {\n                        expect(vars.data.fixData).to.be(1);\n                        expect(vars.data.liveData).to.be(1);\n                        expect(vars.data.hookData).to.be(1);\n                        return response;\n                    }\n                }\n            });\n\n            context.api.order.create({\n                liveData: 1\n            }).then(function(data) {\n                try {\n                    expect(data.orderId).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n\n        it('skip process data when it is mocking ', function (done) {\n            context.create('order', {\n                create: {\n                    mock: true,\n                    mockUrl: host + 'api/order-create',\n                    process: function (response) {\n                        if (this.mock) {\n                            return response;\n                        } else {\n                            return {\n                                orderId: response.id\n                            };\n                        }\n                    }\n                }\n            });\n            context.api.order.create().then(function(data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('error by requesting cross-domain with disabled header [NOTE: IE的行为已被标准化]', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/order-create',\n                    method: 'POST',\n                    header: {foo: 'foo'} // 跨域时, 自定义的`header`将被忽略\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch (e) {\n                    done(e.message);\n                }\n            }, function(error) {\n                // can not go here\n            });\n        });\n\n        it('error by timeout', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/timeout',\n                    method: 'POST',\n                    timeout: 100\n                }\n            });\n            context.api.order.create().then(function () {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(error.timeout).to.be(true);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('pending status checking', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/timeout',\n                    method: 'POST',\n                    timeout: 200\n                }\n            });\n            context.api.order.create().then(function () {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(context.api.order.create.pending).to.be(false);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n            expect(context.api.order.create.pending).to.be(true);\n        });\n\n        it('error by 500', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/500',\n                    method: 'POST'\n                }\n            });\n            context.api.order.create().then(function () {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(error.status).to.be(nattyFetch.ajax.fallback ? undefined : 500);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('error by 404', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/404',\n                    method: 'POST'\n                }\n            });\n\n            // TODO\n            context.on('reject', function (error) {\n                console.warn(error);\n            })\n            context.api.order.create().then(function () {\n                // can not go here\n            })['catch'](function (error) {\n                try {\n                    if (!nattyFetch.ajax.fallback) {\n                        // 即使是现代浏览器,也有status为0的情况\n                        expect(error.status === 0 || error.status === 404).to.be(true);\n                    } else {\n                        expect(error.status).to.be(undefined);\n                    }\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('`GET` resolving after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/retry-success',\n                    method: 'GET',\n                    retry: 2\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            }, function() {\n                // can not go here\n            });\n        });\n\n        it('`GET` with fn-data resolving after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/retry-success',\n                    method: 'GET',\n                    retry: 2\n                }\n            });\n\n            let count = 0;\n\n            context.api.order.create(function () {\n                return {\n                    count: count++\n                }\n            }).then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            }, function() {\n                // can not go here\n            });\n        });\n\n        it('`POST` resolving after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/retry-success',\n                    method: 'POST',\n                    retry: 2\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            }, function() {\n                // can not go here\n            });\n        });\n\n        it('rejecting after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/return-error',\n                    retry: 1\n                }\n            });\n            context.api.order.create().then(function (data) {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(error.code).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        // 连发两次请求，第二次应该被忽略\n        it('ignore seft concurrent', function (done) {\n\n            context.create('order', {\n                create: {\n                    cache: false,\n                    url: host + 'api/timeout', // 请求延迟返回的接口\n                    ignoreSelfConcurrent: true\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n\n            // 第一次请求未完成之前 第二次请求返回的是一个伪造的promise对象\n            let dummyPromise = context.api.order.create().then(function(){\n                throw new Error('unexpected `resolved`');\n            });\n            expect(dummyPromise).to.have.property('dummy');\n\n            // 伪造的promise对象要保证支持链式调用\n            expect(dummyPromise.then()).to.be(dummyPromise);\n            expect(dummyPromise.then().catch()).to.be(dummyPromise);\n        });\n\n        // 连发两次请求, 第二次请求发起时, 如果第一次请求还没有返回, 则取消掉第一次请求(即: 返回时不响应)\n        it('override seft concurrent(XHR)', function (done) {\n\n            context.create('order', {\n                create: {\n                    cache: false,\n                    url: host + 'api/timeout', // 请求延迟返回的接口\n                    overrideSelfConcurrent: true,\n                    process: function(content, vars) {\n                        // vars不应该混淆\n                        expect(vars.data.d).to.be(2);\n                    }\n                }\n            });\n\n            let count = 0;\n\n            // 第一次请求, 不应该有响应\n            context.api.order.create({\n                d: 1\n            }).then(function (data) {\n                count++\n            });\n\n            // 第二次请求, 只响应这次请求\n            setTimeout(function(){\n                context.api.order.create({\n                    d:2\n                }).then(function (data) {\n                    try {\n                        expect(count).to.be(0);\n                        done();\n                    } catch (e) {\n                        done(e);\n                    }\n                });\n            }, 300);\n        });\n\n        // 连发两次请求, 第二次请求发起时, 如果第一次请求还没有响应, 则取消掉第一次请求(的响应)\n        it('override seft concurrent(JSONP)', function (done) {\n\n            context.create('order', {\n                create: {\n                    cache: false,\n                    jsonp: true,\n                    url: host + 'api/jsonp-timeout', // 请求延迟返回的接口\n                    overrideSelfConcurrent: true,\n                    process: function(content, vars) {\n                        // vars不应该混淆\n                        expect(vars.data.d).to.be(2);\n                    }\n                }\n            });\n\n            let count = 0;\n\n            // 第一次请求, 不应该有响应\n            context.api.order.create({\n                d: 1\n            }).then(function (data) {\n                count++\n            });\n\n            // 第二次请求, 只响应这次请求\n            setTimeout(function(){\n                context.api.order.create({\n                    d:2\n                }).then(function (data) {\n                    try {\n                        expect(count).to.be(0);\n                        done();\n                    } catch (e) {\n                        done(e);\n                    }\n                });\n            }, 300);\n        });\n    });\n\n\n    describe('jsonp', function () {\n        // NOTE 重要: 为了能够测试完整的场景, 默认已经全局关闭所有请求的浏览器缓存!!!  比如: ignoreSelfConcurrent\n        //nattyFetch.setGlobal({\n        //    cache: false\n        //});\n\n        this.timeout(1000*10);\n        let context;\n\n        beforeEach('reset', function () {\n            context = nattyFetch.context({\n                urlPrefix: host,\n                mock: false\n            });\n        });\n\n        it('check default jsonpCallbackQuery', function () {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create',\n                    jsonp: true\n                }\n            });\n\n            expect(context.api.order.create.config.jsonpCallbackQuery).to.be(undefined);\n        });\n\n        it('check custom jsonpCallbackQuery', function () {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create',\n                    jsonp: [true, 'cb', 'j{id}']\n                }\n            });\n\n            expect(context.api.order.create.config.jsonp).to.be(true);\n            expect(context.api.order.create.config.jsonpFlag).to.be('cb');\n            expect(context.api.order.create.config.jsonpCallbackName).to.be('j{id}');\n        });\n\n        it('auto detect jsonp option', function () {\n            context.create('order', {\n                create: {\n                    url: host + 'api/order-create.jsonp'\n                }\n            });\n\n            expect(context.api.order.create.config.jsonp).to.be(true);\n        });\n\n        it('jsonp response.success is true', function (done) {\n            context.create('order', {\n                create: {\n                    traditional: true,\n                    data: {\n                        a: [1,2,3]\n                    },\n                    //log: true,\n                    url: host + 'api/jsonp-order-create',\n                    jsonp: true\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('jsonp response.success is false ', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/jsonp-order-create-error',\n                    jsonp: true\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                // can not go here\n            }, function (error) {\n                try {\n                    expect(error).to.have.property('message');\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        });\n\n        // jsonp无法使用状态吗识别出具体的404、500等错误，都统一成`无法连接`的错误信息\n        it('jsonp with error url', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'error-url',\n                    jsonp: true\n                }\n            });\n\n            // TODO\n            context.on('reject', function (error) {\n                console.warn(error);\n            });\n\n            context.api.order.create().then(function (data) {\n                // can not go here\n            }, function (error) {\n                try {\n                    expect(error.message).to.contain('Not Accessable JSONP');\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('jsonp timeout', function (done) {\n            context.create('order', {\n                create: {\n                    //log: true,\n                    url: host + 'api/jsonp-timeout',\n                    jsonp: true,\n                    timeout: 300\n                }\n            });\n            context.api.order.create().then(function () {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(error.timeout).to.be(true);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('`JSONP` resolving after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/jsonp-retry-success',\n                    jsonp: true,\n                    retry: 2\n                }\n            });\n\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            }, function() {\n                // can not go here\n            });\n        });\n\n        it('rejecting after retry', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/jsonp-error',\n                    jsonp: true,\n                    retry: 1\n                }\n            });\n            context.api.order.create().then(function (data) {\n                // can not go here\n            }, function(error) {\n                try {\n                    expect(error.code).to.be(1);\n                    done();\n                } catch(e) {\n                    done(e);\n                }\n            });\n        });\n\n        it('ignore self concurrent', function (done) {\n            context.create('order', {\n                create: {\n                    url: host + 'api/jsonp-timeout', // 请求延迟返回的接口\n                    jsonp: true,\n                    ignoreSelfConcurrent: true\n                }\n            });\n\n            // 连发两次请求，第二次应该被忽略\n            context.api.order.create().then(function (data) {\n                try {\n                    expect(data.id).to.be(1);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n\n            // 第一次请求未完成之前 第二次请求返回的是一个伪造的promise对象\n            let dummyPromise = context.api.order.create();\n            expect(dummyPromise).to.have.property('dummy');\n\n            // 伪造的promise对象要保证支持链式调用\n            expect(dummyPromise.then()).to.be(dummyPromise);\n            expect(dummyPromise.then().catch()).to.be(dummyPromise);\n        });\n    });\n\n});\n","const {\n    appendQueryString, isAbsoluteUrl, isNumber,\n    param, decodeParam, isIE, isCrossDomain,\n    sortPlainObjectKey\n} = nattyFetch._util;\n\ndescribe('./util', function () {\n    describe('param', function () {\n        it(\"{a:'b c', d:['e+f',{g:'h', i:['j','k']}]}\", function () {\n            expect(decodeParam(param({a:'b c', d:['e+f',{g:'h', i:['j','k']}], l:true, m:0})))\n                .to.be(\"a=b c&d[]=e+f&d[1][g]=h&d[1][i][]=j&d[1][i][]=k&l=true&m=0\");\n        });\n        it(\"{ id: function(){ return 1 + 2 } }\", function () {\n            expect(param({ id: function(){ return 1 + 2 } })).to.be('id=3');\n        });\n        it(\"param({ foo: 'bar', nested: { will: 'be ignored' }}, true)\", function () {\n            expect(decodeParam(param({ foo: 'bar', nested: { will: 'be ignored' }}, true)))\n                .to.be(\"foo=bar&nested=[object Object]\");\n        });\n        it(\"param({ foo: [1, 2]}, true)\", function () {\n            expect(decodeParam(param({ foo: [1, 2]}, true))).to.be(\"foo=1&foo=2\");\n        });\n        it(\"param({ foo: [1, 2]})\", function () {\n            expect(decodeParam(param({ foo: [1, 2]}))).to.be(\"foo[]=1&foo[]=2\");\n        });\n    });\n    describe('appendQueryString', function () {\n        it(\"appendQueryString('./p', {})\", function () {\n            expect(appendQueryString('./p', {})).to.be('./p');\n        });\n        it(\"appendQueryString('./p', {foo:'foo'})\", function () {\n            expect(appendQueryString('./p', {foo:'foo'})).to.be('./p?foo=foo');\n        });\n        it(\"appendQueryString('./p?bar=bar', {foo:'foo'})\", function () {\n            expect(appendQueryString('./p?bar=bar', {foo:'foo'})).to.be('./p?bar=bar&foo=foo');\n         });\n    });\n    describe('isAbsoluteUrl', function () {\n        it('`https://path` should be a absolute url', function () {\n            expect(isAbsoluteUrl('https://path')).to.be(true);\n        });\n        it('`http://path` should be a absolute url', function () {\n            expect(isAbsoluteUrl('http://path')).to.be(true);\n        });\n        it('`//path` should be a absolute url', function () {\n            expect(isAbsoluteUrl('//path')).to.be(true);\n        });\n        it('`path//path` should not be a absolute url', function () {\n            expect(isAbsoluteUrl('foo//path')).to.be(false);\n        });\n    });\n    describe('isNumber', function () {\n        it('NaN', function () {\n            expect(isNumber(NaN)).to.be(false);\n        });\n        it('1', function () {\n            expect(isNumber(1)).to.be(true);\n        })\n    });\n\n    describe('protocol', function(){\n\n        it('location protocol', function () {\n            let link = document.createElement('a');\n            link.href = location.href;\n            expect(link.protocol).to.be('http:');\n        });\n\n        it('foo.json protocol (IE diff)', function () {\n            let link = document.createElement('a');\n            link.href = 'foo.json';\n            expect(link.protocol).to.be(isIE ? ':' : 'http:');\n        });\n\n        it('//www.foo.com/json protocol (IE diff)', function () {\n            let link = document.createElement('a');\n            link.href = '//www.foo.com/json';\n            expect(link.protocol).to.be(isIE ? ':' : 'http:');\n        });\n\n        it('https://www.foo.com/json protocol', function () {\n            let link = document.createElement('a');\n            link.href = 'https://www.foo.com/json';\n            expect(link.protocol).to.be('https:');\n        });\n    });\n\n    describe('hostname', function(){\n\n        let originA = document.createElement('a');\n        originA.href = location.href;\n\n        it('location hostname', function () {\n            let link = document.createElement('a');\n            link.href = location.href;\n            expect(link.hostname).to.be(originA.hostname);\n        });\n\n        it('foo.json hostname (IE diff)', function () {\n            let link = document.createElement('a');\n            link.href = 'foo.json';\n            expect(link.hostname).to.be(isIE ? '' : originA.hostname);\n        });\n\n        it('//www.foo.com/json hostname', function () {\n            let link = document.createElement('a');\n            link.href = '//www.foo.com/json';\n            expect(link.hostname).to.be('www.foo.com');\n        });\n\n        it('https://www.foo.com/json hostname', function () {\n            let link = document.createElement('a');\n            link.href = 'https://www.foo.com/json';\n            expect(link.hostname).to.be('www.foo.com');\n        });\n    });\n\n    describe('isCrossDomain', function(){\n        let originA = document.createElement('a');\n        originA.href = location.href;\n\n        it('foo.json', function () {\n            expect(isCrossDomain('foo.json')).to.be(false);\n        });\n\n        it('../foo.json', function () {\n            expect(isCrossDomain('../foo.json')).to.be(false);\n        });\n\n        it('www.foo.com/json', function () {\n            expect(isCrossDomain('www.foo.com/json')).to.be(false);\n        });\n\n        it('//www.foo.com/json', function () {\n            expect(isCrossDomain('//www.foo.com/json')).to.be(true);\n        });\n\n        it('absolute path', function () {\n            expect(isCrossDomain(originA.protocol + '//' + originA.hostname + ':' + originA.port)).to.be(false);\n        });\n\n        it('different protocal', function () {\n            expect(isCrossDomain('https://' + originA.hostname)).to.be(true);\n        });\n\n        it('different port', function () {\n            expect(isCrossDomain(originA.protocol + '//' + originA.hostname + ':9876')).to.be(true);\n        });\n\n        it('https://www.foo.com/json', function () {\n            expect(isCrossDomain('https://www.foo.com/json')).to.be(true);\n        });\n    });\n\n    describe('isSameQueryStringFromObject', function () {\n\n        let isSameQueryStringFromObject = (obj1, obj2) => {\n            return JSON.stringify(sortPlainObjectKey(obj1)) === JSON.stringify(sortPlainObjectKey(obj2));\n        };\n\n        it('turn to the same query string', function () {\n            // 两个对象, 只有键的顺序不一样, 应该转出一样的`query string`\n            expect(isSameQueryStringFromObject({\n                c: 'c',\n                b: 'b',\n                a: {\n                    c:'c',\n                    a:'a'\n                },\n                d: ['b', 'a']\n            }, {\n                b: 'b',\n                c: 'c',\n                d: ['b', 'a'],\n                a: {\n                    a:'a',\n                    c:'c'\n                }\n            })).to.be(true);\n        });\n    })\n});\n","import ExpectAction from './expect-action'\nimport {host} from '../config/host'\nconst {ajax} = nattyFetch;\n\ndescribe('./ajax', function () {\n\n    describe('dependent detects', function () {\n        it('support `CORS`', function () {\n            expect(nattyFetch.ajax.supportCORS).to.be(true);\n        });\n    });\n\n    describe('browser detects：NOT used in nattyFetch', function () {\n        let xhr = new XMLHttpRequest();\n\n        let methods = ['loadstart', 'load', 'progress', 'error', 'timeout'];\n\n        methods.forEach(function (method) {\n            it('support `' + method + '` event: ' + ('on' + method in xhr), function () {\n                \n            });\n        });\n\n        // http://enable-cors.org/index.html\n        it('support `CORS`: ' + ('withCredentials' in xhr), function () {\n            \n        });\n    });\n\n    describe('post', function () {\n        it('accept text', function (done) {\n            ajax({\n                url: host + 'api/return-text',\n                method: 'POST',\n                data: {\n                    'return-text': 1\n                },\n                success: function (res, xhr) {\n                    expect(res).to.be('text');\n                    done();\n                }\n            });\n        });\n\n        it('accept json', function (done) {\n            ajax({\n                url: host + 'api/return-json',\n                method: 'POST',\n                data: {\n                    'return-json': 1\n                },\n                accept: 'json',\n                success: function (res, xhr) {\n                    expect(res).to.eql({tool: 'natty-fetch'});\n                    done();\n                }\n            });\n        });\n\n        it('accept script', function (done) {\n            ajax({\n                url: host + 'api/return-script',\n                method: 'POST',\n                data: {\n                    'return-script': 1\n                },\n                accept: 'script',\n                success: function (res, xhr) {\n                    expect(__test__).to.be(1);\n                    window.__test__ = null;\n                    done();\n                }\n            });\n        });\n    });\n\n\n    describe('event', function () {\n        let ea = new ExpectAction();\n\n        beforeEach('reset expectEvents', function () {\n            ea.reset();\n        });\n\n        afterEach('check expectEvents', function () {\n            ea.check();\n        });\n\n        it('should trigger success and complete', function (done) {\n\n            ea.expect(['success', 'complete']);\n\n            ajax({\n                url: host + 'api/return-json',\n                method: 'POST',\n                data: {\n                    'return-json-success': 1\n                },\n                success: function (res, xhr) {\n                    ea.do('success');\n                },\n                complete: function () {\n                    ea.do('complete');\n                    done();\n                }\n            });\n        });\n\n        it('should trigger success and complete when request the cross-domain with disabled header', function (done) {\n\n            ea.expect(['success', 'complete']);\n\n            ajax({\n                //log: true,\n                url: host + 'api/return-json',\n                method: 'POST',\n                data: {\n                    'cross-domain-with-disabled-header': 1\n                },\n                // 使用不合法的Header来触发跨域失败\n                header: {foo: 'foo'},\n                accept: 'json',\n                success: function (status, xhr) {\n                    ea.do('success');\n                },\n                complete: function () {\n                    ea.do('complete');\n                    done();\n                }\n            });\n        });\n\n        it('should trigger error and complete when 500', function (done) {\n\n            ea.expect(['error', 'complete']);\n\n            ajax({\n                //log: true,\n                url: host + 'api/500',\n                method: 'POST',\n                accept: 'json',\n                error: function (status, xhr) {\n                    ea.do('error');\n                },\n                complete: function () {\n                    ea.do('complete');\n                    done();\n                }\n            });\n        });\n\n        it('should trigger error and complete when 404', function (done) {\n            ea.expect(['error', 'complete']);\n\n            ajax({\n                //log: true,\n                url: host + 'api/404',\n                method: 'POST',\n                accept: 'json',\n                error: function (status, xhr) {\n                    ea.do('error');\n                },\n                complete: function () {\n                    ea.do('complete');\n                    done();\n                }\n            });\n        });\n\n        it('should trigger abort and complete when request is aborted', function (done) {\n\n            ea.expect(['abort', 'complete']);\n\n            var xhr = ajax({\n                //log: true,\n                url: host + 'api/abort',\n                method: 'POST',\n                abort: function () {\n                    ea.do('abort');\n                },\n                complete: function () {\n                    ea.do('complete');\n                }\n            });\n            setTimeout(function () {\n                xhr.abort();\n                done();\n            }, 100);\n        });\n\n        it('calling `abort` after `complete` event should be ignored', function (done) {\n            this.timeout(5000);\n            ea.expect(['success', 'complete']);\n\n            var xhr = ajax({\n                log: true,\n                url: host + 'api/return-json',\n                method: 'POST',\n                success: function () {\n                    ea.do('success');\n                },\n                complete: function () {\n                    ea.do('complete');\n                }\n            });\n            setTimeout(function () {\n                xhr.abort();\n                done();\n            }, 1000);\n        });\n    });\n});\n\n","import {host} from '../config/host'\n\ndescribe('./hooks', function(){\n\n    describe('willFetch', function(){\n\n        this.timeout(1000*60);\n\n        it('ajax willFetch call', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host,\n                willFetch() {\n                    done()\n                }\n            })\n            context.create({\n                getApi: {\n                    url: 'api/return-json',\n                    fit(resp) {\n                        return {\n                            success: true,\n                            content: resp\n                        }\n                    }\n                }\n            })\n            context.api.getApi().then((content) => {})\n        })\n\n        it('jsonp willFetch call', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host,\n                willFetch() {\n                    done()\n                }\n            })\n            context.create({\n                getApi: {\n                    url: 'api/jsonp-order-create',\n                    jsonp: true,\n                    fit(resp) {\n                        return resp\n                    }\n                }\n            })\n            context.api.getApi().then((content) => {})\n        })\n\n    })\n\n    describe('didFetch', function(){\n\n        it('ajax success didFetch', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host\n            })\n            context.create({\n                getApi: {\n                    url: 'api/return-json',\n                    fit(resp) {\n                        return {\n                            success: true,\n                            content: resp\n                        }\n                    },\n                    didFetch(config) {\n                        //console.log(config)\n                        done()\n                    }\n                }\n            })\n            context\n                .api\n                .getApi()\n                .then((content) => {\n                })\n        })\n\n        it('jsonp success didFetch long time', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host\n            })\n            context.create({\n                getApi: {\n                    url: 'api/jsonp-timeout',\n                    jsonp: true,\n                    timeout: 2000,\n                    fit(resp) {\n                        return {\n                            success: true,\n                            content: resp\n                        }\n                    },\n                    didFetch(config) {\n                        //console.log(config)\n                        done()\n                    }\n                }\n            })\n            context\n                .api\n                .getApi()\n                .then((content) => {\n                })\n        })\n\n        it('ajax error didFetch', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host\n            })\n            context.create({\n                getApi: {\n                    url: 'api/return-error',\n                    fit(resp) {\n                        return resp\n                    },\n                    didFetch(config) {\n                        //console.log(config)\n                        done()\n                    }\n                }\n            })\n            context\n                .api\n                .getApi()\n                .then((content) => {\n                }, (reason) => {\n                    //console.log(reason)\n                })\n        })\n\n        it('jsonp error didFetch', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host,\n                jsonp: true\n            })\n            context.create({\n                getApi: {\n                    url: 'api/jsonp-order-create-error',\n                    fit(resp) {\n                        return resp\n                    },\n                    didFetch(config) {\n                        //console.log(config)\n                        done()\n                    }\n                }\n            })\n            context\n                .api\n                .getApi()\n                .then((content) => {\n                }, (reason) => {\n                    //console.log(reason)\n                })\n        })\n\n        it('ajax timeout should NOT fire `didFetch`', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host,\n                timeout: 300\n            });\n            let count = 0;\n            context.create({\n                getApi: {\n                    url: 'api/timeout',\n                    didFetch() {\n                        // timeout时不应该调用didFetch\n                        count++\n                    }\n                }\n            });\n\n            context.api.getApi().then(function () {\n\n            }).catch(function () {\n                try {\n                    expect(count).to.be(0);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        })\n\n        it('jsonp timeout should NOT fire `didFetch`', function (done) {\n            let context = nattyFetch.context({\n                urlPrefix: host,\n                jsonp: true,\n                timeout: 300\n            });\n\n            let count = 0;\n            context.create({\n                getApi: {\n                    url: 'api/jsonp-timeout',\n                    didFetch() {\n                        // timeout时不应该调用didFetch\n                        count++\n                    }\n                }\n            });\n\n            context.api.getApi().then(function () {\n\n            }).catch(function () {\n                try {\n                    expect(count).to.be(0);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        })\n\n    })\n\n})\n","import {host} from '../config/host'\n\ndescribe('storage', function () {\n\n    this.timeout(1000*10);\n    let context;\n\n    beforeEach('reset', function () {\n        context = nattyFetch.context({\n            urlPrefix: host,\n            mock: false,\n        });\n    });\n\n    it('query string is same: localStorage', function (done) {\n        let requestTime = 0;\n        context.create('user', {\n            getPhone: {\n                url: host + 'api/return-success',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: {\n                    type: 'localStorage',\n                    tag: 'v1.0',\n                    key: 'test-query-string'\n                }\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.user.getPhone({\n            b:1,\n            a:1\n        }).then(function (r) {\n            // 第二次请求走storage\n            return context.api.user.getPhone({\n                a:1,\n                b:1\n            });\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n            // 特别注意 expect不管是否成功, 都要销毁storage, 避免下次刷新后的测试\n            context.api.user.getPhone.storage.destroy();\n\n        }).catch();\n    });\n\n    it('query string is same: sessionStorage', function (done) {\n        let requestTime = 0;\n        context.create('user', {\n            getPhone: {\n                url: host + 'api/return-success',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: {\n                    type: 'sessionStorage',\n                    tag: 'v1.0'\n                }\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.user.getPhone({\n            b:1,\n            a:1\n        }).then(function (r) {\n            // 第二次请求走storage\n            return context.api.user.getPhone({\n                a:1,\n                b:1\n            });\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n            // 特别注意 expect不管是否成功, 都要销毁storage, 避免下次刷新后的测试\n            context.api.user.getPhone.storage.destroy();\n\n        }).catch();\n    });\n\n    //\n    it('query string is same: variable', function (done) {\n        let requestTime = 0;\n        context.create('user', {\n            getPhone: {\n                url: host + 'api/return-success',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: {\n                    type: 'variable',\n                    tag: 'v1.0'\n                }\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.user.getPhone({\n            b:1,\n            a:1\n        }).then(function (r) {\n            // 第二次请求走storage\n            return context.api.user.getPhone({\n                a:1,\n                b:1\n            });\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n        }).catch();\n    });\n\n    it('query string is same with jsonp', function (done) {\n        let requestTime = 0;\n        context.create('user', {\n            getPhone: {\n                jsonp: true,\n                url: host + 'api/jsonp-order-create',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: {\n                    type: 'localStorage',\n                    tag: 'v1.0',\n                    key: 'test-jsonp-with-storage'\n                }\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.user.getPhone({\n            b:1,\n            a:1\n        }).then(function (r) {\n            // 第二次请求走storage\n            return context.api.user.getPhone({\n                a:1,\n                b:1\n            });\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n            // 特别注意 expect不管是否成功, 都要销毁storage, 避免下次刷新后的测试\n            context.api.user.getPhone.storage.destroy();\n        }).catch();\n    });\n\n    it('query string is different', function (done) {\n        let requestTime = 0;\n        context.create({\n            get: {\n                url: host + 'api/return-success',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: true\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.get({\n            b:1,\n            a:1\n        }).then(function () {\n            // 第二次请求, 参数不一样, 依然走网络\n            return context.api.get({\n                a:1\n            });\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(2);\n                done();\n            } catch (e) {\n                done(e);\n            }\n            // 特别注意 expect不管是否成功, 都要销毁storage, 避免下次刷新后的测试\n            context.api.get.storage.destroy();\n        }).catch();\n    });\n\n\n    it('no query string', function (done) {\n        let requestTime = 0;\n        context.create({\n            get: {\n                url: host + 'api/return-success',\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestTime++;\n                    }\n                },\n                storage: true\n            }\n        });\n\n        // 第一次请求走网络\n        context.api.get().then(function () {\n            // 第二次请求, 走storage\n            return context.api.get();\n        }).then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                expect(requestTime).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n            // 特别注意 expect不管是否成功, 都要销毁storage, 避免下次刷新后的测试\n            context.api.get.storage.destroy();\n        }).catch();\n    });\n\n    it('`POST` request with `storage` on should throw an error', function () {\n        let requestTime = 0;\n        let errorFn = function () {\n            context.create({\n                get: {\n                    url: host + 'api/return-success',\n                    method: 'POST',\n                    storage: true\n                }\n            })\n        }\n        expect(errorFn).to.throwError();\n    });\n});","import {host} from '../config/host'\n\n\ndescribe('plugin', function () {\n\n    it('options.plugins should been merged, NOT overrided.', function () {\n\n        let context = nattyFetch.context({\n            urlPrefix: host,\n            plugins: [\n                nattyFetch.plugin.soon\n            ]\n        });\n\n        context.create({\n            foo: {\n                url: host + 'api/return-success',\n                plugins: [\n                    nattyFetch.plugin.loop\n                ]\n            }\n        });\n\n        expect(context.api.foo.soon).to.be.a('function');\n        expect(context.api.foo.loop).to.be.a('function');\n    });\n});","import {host} from '../config/host'\n\ndescribe('plugin soon', function () {\n    it('`soon` method with `storage` is open', function (done) {\n        let context = nattyFetch.context({\n            urlPrefix: host,\n            mock: false\n        });\n\n        let outerCount = 0;\n        let innerCount = 0;\n        let requestCount = 0;\n\n        context.create({\n            'foo.get': {\n                url: host + 'api/return-stamp',\n                storage: true,\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestCount++;\n                    }\n                },\n                plugins: [\n                    nattyFetch.plugin.soon\n                ]\n            }\n        });\n\n        // 外层请求, 首次请求没有storage缓存, success回调只应该执行一次, 数据来自远程服务器\n        let outerData;\n        let innerDataFromStorage;\n        \n        context.api.foo.get.soon({\n            q: 1\n        }, function (data) {\n            outerCount++;\n            outerData = data;\n            // console.log('data', JSON.stringify(data));\n            // 内层请求, 参数一致, 应该有storage缓存, success回调应该执行2次,\n            context.api.foo.get.soon({\n                q:1\n            }, function (data2) {\n                innerCount++;\n                if (innerCount === 1) {\n                    innerDataFromStorage = data2;\n                }\n                // console.log('data2', JSON.stringify(data2));\n            });\n        }, function (e) {\n            done(e);\n        });\n\n        setTimeout(function () {\n            try {\n                expect(outerCount).to.be(1);\n                expect(innerCount).to.be(2);\n                expect(requestCount).to.be(2);\n                expect(outerData.fromStorage).to.be(false);\n                expect(innerDataFromStorage.fromStorage).to.be(true);\n                expect(JSON.stringify(outerData.content)).to.be(JSON.stringify(innerDataFromStorage.content));\n                context.api.foo.get.storage.destroy();\n                done();\n            } catch (e) {\n                done(e);\n            }\n        }, 800);\n    });\n\n    it('`soon` method with `storage` is closed', function (done) {\n\n        let context = nattyFetch.context({\n            urlPrefix: host,\n            mock: false\n        });\n\n        let outerCount = 0;\n        let innerCount = 0;\n        let requestCount = 0;\n\n        context.create({\n            'foo.get': {\n                url: host + 'api/return-stamp',\n                storage: false,\n                willFetch: function (vars, config, from) {\n                    if (from === 'remote') {\n                        requestCount++;\n                    }\n                },\n                plugins: [\n                    nattyFetch.plugin.soon\n                ]\n            }\n        });\n\n        // 外层请求, 首次请求没有storage缓存, success回调只应该执行一次, 数据来自远程服务器\n        let outerData;\n        let innerDataFromStorage;\n        context.api.foo.get.soon({\n            q: 1\n        }, function (data) {\n            outerCount++;\n            outerData = data;\n            // console.log('data', JSON.stringify(data));\n            // 内层请求, 没有storage缓存, success回调只应该执行一次,\n            context.api.foo.get.soon({\n                q:1\n            }, function (data2) {\n                innerCount++;\n                innerDataFromStorage = data2;\n                // console.log('data2', JSON.stringify(data2));\n            });\n        }, function (e) {\n            done(e);\n        });\n\n        setTimeout(function () {\n            try {\n                expect(outerCount).to.be(1);\n                expect(innerCount).to.be(1);\n                expect(requestCount).to.be(2);\n                expect(outerData.fromStorage).to.be(false);\n                expect(innerDataFromStorage.fromStorage).to.be(false);\n                expect(JSON.stringify(outerData.content)).not.to.be(JSON.stringify(innerDataFromStorage.content));\n                done();\n            } catch (e) {\n                done(e);\n            }\n        }, 800);\n    });\n});","import {host} from '../config/host'\n\ndescribe('plugin loop', function () {\n    // it('loop 2x', function (done) {\n    //     this.timeout(1000*600);\n    //     let context = nattyFetch.context({\n    //         urlPrefix: host,\n    //         mock: false\n    //     });\n    //\n    //     context.create('taxi', {\n    //         getDriverNum: {\n    //             url: host + 'api/return-success',\n    //             plugins: [\n    //                 nattyFetch.plugin.loop\n    //             ]\n    //         }\n    //     });\n    //\n    //     let time = 0;\n    //\n    //     // 开始轮询\n    //     let stop1 = context.api.taxi.getDriverNum.loop({\n    //         data: {\n    //             loop: '__1__'\n    //         },\n    //         duration: 1000\n    //     }, function (data) {\n    //         // 成功回掉\n    //         time++;\n    //     }, function (error) {\n    //         // 失败回调\n    //     });\n    //\n    //     // 开始轮询\n    //     let stop2 = context.api.taxi.getDriverNum.loop({\n    //         data: {\n    //             loop: '__2__'\n    //         },\n    //         duration: 1000\n    //     }, function (data) {\n    //         // 成功回掉\n    //         time++;\n    //     }, function (error) {\n    //         // 失败回调\n    //     });\n    //\n    //     setTimeout(function () {\n    //         // expect(time).to.be.above(1);\n    //         // 验证状态\n    //         // expect(context.api.taxi.getDriverNum.looping).to.be(true);\n    //         // 停止轮询\n    //         stop1();\n    //         // 验证状态\n    //         // expect(context.api.taxi.getDriverNum.looping).to.be(false);\n    //         // done();\n    //     }, 5000);\n    //\n    //     setTimeout(function () {\n    //         // expect(time).to.be.above(1);\n    //         // 验证状态\n    //         // expect(context.api.taxi.getDriverNum.looping).to.be(true);\n    //         // 停止轮询\n    //         stop2();\n    //         // 验证状态\n    //         // expect(context.api.taxi.getDriverNum.looping).to.be(false);\n    //         // done();\n    //     }, 8000);\n    //\n    //\n    //     setInterval(function () {\n    //         console.log('1:', stop1.looping);\n    //         console.log('2:', stop2.looping);\n    //     }, 1000)\n    // });\n\n\n\n    it('loop', function (done) {\n\n        let context = nattyFetch.context({\n            urlPrefix: host,\n            mock: false\n        });\n\n        context.create('taxi', {\n            getDriverNum: {\n                url: host + 'api/return-success',\n                plugins: [\n                    nattyFetch.plugin.loop\n                ]\n            }\n        });\n\n        let time = 0;\n\n        // 开始轮询\n        let stop = context.api.taxi.getDriverNum.loop({\n            data: {},\n            duration: 200\n        }, function (data) {\n            // 成功回掉\n            time++;\n        }, function (error) {\n            // 失败回调\n        });\n\n        setTimeout(function () {\n            expect(time).to.be.above(1);\n            // 验证状态\n            expect(stop.looping).to.be(true);\n            // 停止轮询\n            stop();\n            // 验证状态\n            expect(stop.looping).to.be(false);\n            done();\n        }, 1000);\n    });\n});","\"use strict\";\nimport {host} from '../config/host'\n\ndescribe.skip('plugin customRequest', function () {\n    this.timeout(1000*10);\n    it('customRequest', function (done) {\n\n        let context = nattyFetch.context({\n            urlPrefix: host,\n            mock: false\n        });\n\n        const {appendQueryString, extend, param} = nattyFetch._util;\n        let lwp = function (apiInstance) {\n            // 只有get/post才使用lwp\n            if (apiInstance.config.jsonp) {\n                return;\n            }\n            apiInstance.config.customRequest = function (vars, config, defer) {\n                let isPOST = config.method === 'POST';\n\n                let lwpOptions = {\n                    uri: isPOST ? config.url : appendQueryString(config.url, extend(vars.mark, vars.data, config.traditional)),\n                    method: config.method,\n                    headers: config.header,\n                    body: isPOST ? param(vars.data, config.traditional) : '',\n                    onSuccess: function (res) {\n                        if (res.statusCode == 200) {\n                            apiInstance.processResponse(vars, config, defer, JSON.parse(res.responseText));\n                        } else {\n                            defer.reject({\n                                statusCode: res.statusCode,\n                                message: res.statusText\n                            });\n                        }\n                    },\n                    onError: function (error) {\n                        defer.reject(error);\n                    }\n                };\n                dd.internal.request.httpOverLWP(lwpOptions);\n            }\n        }\n\n        context.create({\n            foo: {\n                url: 'http://120.26.213.24:3000/api/xhr-success',\n                method: 'POST',\n                data: {gg:'a'},\n                plugins: [\n                    lwp\n                ]\n            },\n            boo: {\n                url: 'http://120.26.213.24:3000/api/xhr-failed',\n                plugins: [\n                    lwp\n                ]\n            },\n            boo500: {\n                url: 'http://120.26.213.24:3000/api/500',\n                plugins: [\n                    lwp\n                ]\n            },\n            boo404: {\n                url: 'http://example404.com/',\n                plugins: [\n                    lwp\n                ]\n            },\n        });\n\n        context.api.foo({hh:'a'}).then(function (content) {\n            console.log('foo');\n            console.log(content);\n            done();\n        });\n\n        // context.api.boo().then(function (content) {\n        //\n        // }).catch(function (error) {\n        //     console.log('boo');\n        //     console.log(error);\n        //     // done();\n        // });\n        //\n        // context.api.boo500().then(function (content) {\n        //\n        // }).catch(function (error) {\n        //     console.log('500');\n        //     console.log(error);\n        //\n        // });\n        //\n        // context.api.boo404().then(function (content) {\n        //\n        // }).catch(function (error) {\n        //     console.log('404');\n        //     console.log(error);\n        //\n        // });\n    });\n});\n","import {host} from '../config/host'\n\nlet xit = function(ignore, fn) {\n    fn();\n}\nxit.xonly = xit;\n\ndescribe('nattyFetch.create', function () {\n\n    this.timeout(1000*30);\n\n    it('play with standard data structure', function (done) {\n        let fooFetch = nattyFetch.create({\n            urlPrefix: host,\n            url: 'api/order-create',\n            method: 'POST',\n            //traditional: true\n        });\n\n        fooFetch().then(function(data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('play with non-standard data structure by `fit`', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/order-create-non-standard',\n            method: 'POST',\n            fit: function (response) {\n                return {\n                    success: !response.hasError,\n                    content: response.content\n                };\n            }\n        });\n\n        fooFetch().then(function(data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('process data', function (done) {\n\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/order-create',\n            method: 'POST',\n            process: function (content) {\n                return {\n                    orderId: content.id\n                };\n            }\n        });\n\n        fooFetch().then(function(content) {\n            try {\n                expect(content.orderId).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    // 固定参数和动态参数 在process和fix方法中都可以正确获取到\n    it('`vars.data` in process or fix method', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/order-create',\n            method: 'POST',\n            data: {\n                liveData: 1\n            },\n            willFetch: function (vars, config) {\n                vars.data.hookData = 1;\n                // console.log(vars);\n                // console.log(config);\n                // console.log(this);\n            },\n            process: function (content, vars) {\n                expect(vars.data.liveData).to.be(1);\n                expect(vars.data.hookData).to.be(1);\n                return {\n                    orderId: content.id\n                };\n            },\n            fit: function (response, vars) {\n                expect(vars.data.liveData).to.be(1);\n                expect(vars.data.hookData).to.be(1);\n                return response;\n            }\n        });\n\n        fooFetch().then(function(data) {\n            try {\n                expect(data.orderId).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n\n    it('skip process data when it is mocking ', function (done) {\n        let fooFetch = nattyFetch.create({\n            mock: true,\n            mockUrl: host + 'api/order-create',\n            process: function (response) {\n                if (this.mock) {\n                    return response;\n                } else {\n                    return {\n                        orderId: response.id\n                    };\n                }\n            }\n        });\n\n        fooFetch().then(function(data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('error by requesting cross-domain with disabled header [NOTE: IE的行为已被标准化]', function (done) {\n        let fooFetch = nattyFetch.create({\n            //log: true,\n            url: host + 'api/order-create',\n            method: 'POST',\n            header: {foo: 'foo'} // 跨域时, 自定义的`header`将被忽略\n        });\n\n        fooFetch().then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n        }, function(error) {\n            // can not go here\n        });\n    });\n\n    it('error by timeout', function (done) {\n        let fooFetch = nattyFetch.create({\n            //log: true,\n            url: host + 'api/timeout',\n            method: 'POST',\n            timeout: 100\n        });\n\n        fooFetch().then(function () {\n            // can not go here\n        }, function(error) {\n            try {\n                expect(error.timeout).to.be(true);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('error by 500', function (done) {\n        let fooFetch = nattyFetch.create({\n            //log: true,\n            url: host + 'api/500',\n            method: 'POST'\n        });\n\n        fooFetch().then(function () {\n            // can not go here\n        }, function(error) {\n            try {\n                expect(error.status).to.be(nattyFetch.ajax.fallback ? undefined : 500);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('error by 404', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/404',\n            method: 'POST'\n        });\n\n        fooFetch().then(function () {\n            // can not go here\n        })['catch'](function (error) {\n            try {\n                if (!nattyFetch.ajax.fallback) {\n                    // 即使是现代浏览器,也有status为0的情况\n                    expect(error.status === 0 || error.status === 404).to.be(true);\n                } else {\n                    expect(error.status).to.be(undefined);\n                }\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    it('`GET` resolving after retry', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/retry-success',\n            method: 'GET',\n            retry: 2\n        });\n\n        fooFetch().then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        }, function() {\n            // can not go here\n        });\n    });\n\n    it('`GET` with fn-data resolving after retry', function (done) {\n\n        let count = 0;\n\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/retry-success',\n            method: 'GET',\n            retry: 2,\n            data: function () {\n                return {\n                    count: count++\n                }\n            }\n        });\n\n        fooFetch().then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        }, function() {\n            // can not go here\n        });\n    });\n\n    it('`POST` resolving after retry', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/retry-success',\n            method: 'POST',\n            retry: 2\n        });\n\n        fooFetch().then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        }, function() {\n            // can not go here\n        });\n    });\n\n    it('rejecting after retry', function (done) {\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/return-error',\n            retry: 1\n        });\n\n        fooFetch().then(function (data) {\n            // can not go here\n        }, function(error) {\n            try {\n                expect(error.code).to.be(1);\n                done();\n            } catch(e) {\n                done(e);\n            }\n        });\n    });\n\n    // 简单请求的`ignoreSelfConcurrent`不会起作用, 连发两次请求，第二次依然有效\n    it('`ignoreSeftConcurrent` should work', function (done) {\n        let fooFetch = nattyFetch.create({\n            cache: false,\n            url: host + 'api/timeout', // 请求延迟返回的接口\n            ignoreSelfConcurrent: true\n        });\n\n        fooFetch().then(function (data) {\n            try {\n                expect(data.id).to.be(1);\n                done();\n            } catch (e) {\n                done(e);\n            }\n        });\n\n        // 第一次请求未完成之前 第二次请求返回的是一个伪造的promise对象\n        let dummyPromise = fooFetch().then(function(){\n            throw new Error('unexpected `resolved`');\n        });\n        expect(dummyPromise).to.have.property('dummy');\n\n        // 伪造的promise对象要保证支持链式调用\n        expect(dummyPromise.then()).to.be(dummyPromise);\n        expect(dummyPromise.then().catch()).to.be(dummyPromise);\n    });\n\n    // 连发两次请求, 第二次请求发起时, 如果第一次请求还没有返回, 则取消掉第一次请求(即: 返回时不响应)\n    it('`overrideSeftConcurrent` should work (XHR)', function (done) {\n\n        // 第一次请求, 不应该有响应\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/timeout', // 请求延迟返回的接口\n            data: {\n                d: 0\n            },\n            overrideSelfConcurrent: true,\n            process: function(content, vars) {\n                // vars不应该混淆\n                expect(vars.data.d).to.be(2);\n            }\n        });\n\n        let count = 0;\n\n        // 第一次请求, 不应该有响应\n        fooFetch({\n            d: 1\n        }).then(function (data) {\n            count++\n        });\n\n        // 第二次请求, 只响应这次请求\n        setTimeout(function(){\n            fooFetch({\n                d:2\n            }).then(function (data) {\n                try {\n                    expect(count).to.be(0);\n                    done();\n                } catch (e) {\n                    done(e);\n                }\n            });\n        }, 300);\n    });\n\n    // 取消响应\n    it('calling `abort`', function (done) {\n\n        let count = 0;\n\n        let fooFetch = nattyFetch.create({\n            url: host + 'api/success'\n        });\n\n        fooFetch().then(function () {\n            // 不应该执行到这里\n            count++\n        });\n\n        expect(fooFetch.pending).to.be(true);\n\n        // 马上取消\n        fooFetch.abort();\n\n        setTimeout(function () {\n            try {\n                expect(count).to.be(0);\n                expect(fooFetch.pending).to.be(false);\n                done();\n            } catch (e) {\n                done(e);\n            }\n        }, 300);\n    });\n});","import {host} from '../config/host'\n\nconst xit = function(ignore, fn) {\n    fn();\n}\nxit.xonly = xit;\n\nconst noop = function () {\n\n}\n\n/**\n * 伪造的带有`finally`方法的`promise`对象\n * new MyPromise(function(resolve, reject) {})\n */\nclass MyPromise {\n    constructor(f) {\n        // 对应的`resolve`和`reject`需要是函数\n        f(noop, noop)\n    }\n    then() {\n        return this\n    }\n    catch() {\n        return this\n    }\n    finally() {\n        return this\n    }\n}\n\ndescribe('use private `Promise` object', function () {\n\n    this.timeout(1000*30);\n\n    it('MyPromise instance should have `finally` method', function () {\n        let fooFetch = nattyFetch.create({\n            urlPrefix: host,\n            url: 'api/order-create',\n            method: 'POST',\n            Promise: MyPromise\n        });\n\n        expect(fooFetch().finally).to.be.a('function');\n    });\n\n\n    it('origin Promise instance dose NOT have `finally` method', function () {\n        let fooFetch = nattyFetch.create({\n            urlPrefix: host,\n            url: 'api/order-create',\n            method: 'POST'\n        });\n\n        expect(fooFetch().finally).to.be(undefined);\n    });\n\n\n    it('set RSVP Promise on context', function () {\n        let context = nattyFetch.context({\n            Promise: MyPromise\n        });\n\n        context.create({\n            fooFetch: {\n                urlPrefix: host,\n                url: 'api/order-create',\n                method: 'POST'\n            }\n        });\n\n        expect(context.api.fooFetch().finally).to.be.a('function');\n    });\n});"],"names":["ExpectAction","this","reset","const","host","describe","it","expect","nattyFetch","version","to","equal","timeout","let","defaultGlobalConfig","getGlobal","defaultGlobalConfigProperties","resetNattyDBGlobalConfig","_event","setGlobal","beforeEach","afterEach","i","indexOf","forEach","property","have","key","be","data","_csrf_token","eql","urlPrefix","context","_config","create","api","order","config","done","url","method","then","notExistedFn","error","window","console","log","message","stack","C","on","id","e","code","globalResolve","content","globalReject","jsonp","mock","pay","a","close","mockUrlPrefix","mockUrl","transfer","delay","method1","method2","method3","method4","method5","method6","method7","skip","getPayId","successFn","setTimeout","getSign","request","vars","defer","b","resolve","errorFn","retryTime","reject","retry","count","ignoreSelfConcurrent","fit","response","success","hasError","process","orderId","fixData","willFetch","hookData","liveData","header","foo","pending","status","ajax","fallback","undefined","warn","cache","dummyPromise","Error","catch","overrideSelfConcurrent","d","jsonpCallbackQuery","jsonpFlag","jsonpCallbackName","traditional","contain","_util","appendQueryString","isAbsoluteUrl","isNumber","param","decodeParam","isIE","isCrossDomain","sortPlainObjectKey","g","l","m","nested","will","NaN","link","document","createElement","href","location","protocol","originA","hostname","port","isSameQueryStringFromObject","obj1","obj2","JSON","stringify","c","prototype","do","action","actualEvents","push","events","expectEvents","t","check","supportCORS","xhr","XMLHttpRequest","methods","return-text","res","return-json","accept","tool","return-script","__test__","ea","return-json-success","complete","cross-domain-with-disabled-header","abort","getApi","resp","didFetch","reason","requestTime","getPhone","from","storage","type","tag","user","r","destroy","get","throwError","plugins","plugin","soon","loop","outerCount","innerCount","requestCount","foo.get","outerData","innerDataFromStorage","q","data2","fromStorage","not","getDriverNum","time","stop","taxi","duration","above","looping","extend","lwp","apiInstance","customRequest","isPOST","lwpOptions","uri","mark","headers","body","onSuccess","statusCode","processResponse","parse","responseText","statusText","onError","dd","internal","httpOverLWP","gg","boo","boo500","boo404","hh","xit","ignore","fn","xonly","fooFetch","noop","MyPromise","f","finally","Promise"],"mappings":"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"}